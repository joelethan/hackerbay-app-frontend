{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","event","key","state","player","dim","_ref","board","setState","move","_ref2","length","_ref3","_ref4","indexOf","alert","message","Array","Math","pow","fill","sqr","width","height","brd","sprites","parseInt","prompt","abs","i","bod","l","num","max","ints","randNum","floor","random","push","getRandomInts","_this2","react_default","a","createElement","className","style","onKeyUp","tabIndex","map","cell","index","onClick","handleClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.872e51a0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      message: 'Start',\r\n      board: Array(Math.pow(0,2)).fill(''),\r\n      sqr: {width:'50px',height:'50px'},\r\n      brd: {width:'50px',height:'50px'},\r\n      sprites: '',\r\n      player: '',\r\n      dim: null,\r\n      move: 0\r\n    }\r\n  }\r\n\r\n  handleClick() {\r\n    // Get board length from user\r\n    var dim = parseInt(prompt('Enter length of the board: '))\r\n\r\n    if(dim) {\r\n      dim = Math.abs(dim)\r\n\r\n      this.setState({\r\n        dim: dim\r\n      })\r\n\r\n      // Create Array of squares\r\n      var bod = Array(Math.pow(dim,2)).fill('') \r\n\r\n      // Generate random numbers for the sprites\r\n      function getRandomInt(max) {\r\n        return Math.floor(Math.random() * max);\r\n      }\r\n      function getRandomInts(num) {\r\n        var ints = [];\r\n        while (ints.length < num) {\r\n          var randNum = getRandomInt(Math.pow(dim,2));\r\n          if(ints.indexOf(randNum) === -1){\r\n            ints.push(randNum);\r\n          }\r\n        }\r\n        return ints;\r\n      }\r\n      var l = getRandomInts(dim);\r\n\r\n    this.setState({\r\n      sprites: l\r\n    })\r\n\r\n      //populate the grid with the random sprites\r\n      var i;\r\n      for (i = 0; i < l.length; i++) {\r\n        bod[l[i]] = '.'\r\n      }\r\n\r\n      //Place the player in the grid\r\n\r\n      //Odd number board length\r\n      if(dim%2){\r\n        // eslint-disable-next-line\r\n        this.state.player = ((bod).length-1)/2\r\n      }\r\n      //Even number board length\r\n      else{\r\n        // eslint-disable-next-line\r\n        this.state.player = dim*(dim-1)/2\r\n      }\r\n        bod[this.state.player] = ','\r\n\r\n      // Update the board with new data\r\n      this.setState({\r\n        board: bod,\r\n        brd: {width:dim*'50'+'px',height:dim*'50'+'px'},\r\n        sprites: this.state.sprites,\r\n        message: 'Reset'\r\n      })\r\n    }\r\n  }\r\n\r\n  handleKeyPress = (event) => {\r\n\r\n    switch(event.key) {\r\n\r\n      case \"ArrowUp\":\r\n      if(this.state.player >= this.state.dim){\r\n\r\n        [this.state.board[this.state.player - this.state.dim], this.state.board[this.state.player]] =\r\n                  [this.state.board[this.state.player], this.state.board[this.state.player - this.state.dim]]\r\n        // eslint-disable-next-line\r\n        this.state.board[this.state.player] = ''\r\n\r\n        this.setState({\r\n          player : this.state.player - this.state.dim,\r\n          move : this.state.move+1\r\n        })\r\n      }\r\n      break;\r\n\r\n      case \"ArrowRight\":\r\n      if((this.state.player + this.state.dim + 1)%this.state.dim){\r\n\r\n          [this.state.board[this.state.player+1], this.state.board[this.state.player]] = \r\n                    [this.state.board[this.state.player], this.state.board[this.state.player+1]]\r\n          // eslint-disable-next-line\r\n          this.state.board[this.state.player] = ''\r\n\r\n          this.setState({\r\n            player : this.state.player + 1,\r\n            move : this.state.move + 1\r\n          }\r\n        )}\r\n      break;\r\n\r\n      case \"ArrowDown\":\r\n      if(this.state.player < this.state.board.length - this.state.dim){\r\n\r\n        [this.state.board[this.state.player + this.state.dim], this.state.board[this.state.player]] = \r\n                  [this.state.board[this.state.player], this.state.board[this.state.player + this.state.dim]]\r\n        // eslint-disable-next-line\r\n        this.state.board[this.state.player] = ''\r\n\r\n        this.setState({\r\n          player : this.state.player + this.state.dim,\r\n          move : this.state.move+1\r\n        })\r\n      }\r\n      break;\r\n\r\n      case \"ArrowLeft\":\r\n      if((this.state.player + this.state.dim )%this.state.dim){\r\n\r\n        [this.state.board[this.state.player-1], this.state.board[this.state.player]] =\r\n                  [this.state.board[this.state.player], this.state.board[this.state.player-1]]\r\n\r\n        // eslint-disable-next-line\r\n        this.state.board[this.state.player] = ''\r\n\r\n        this.setState({\r\n          player : this.state.player - 1,\r\n          move : this.state.move+1\r\n        })\r\n      }\r\n      break;\r\n\r\n      default:\r\n    }\r\n    this.setState({ \r\n      board: this.state.board\r\n    })\r\n    if(this.state.board.indexOf('.')===-1){\r\n      alert('\\n Game over. Total moves: ' + this.state.move);\r\n      this.setState({move: 1})\r\n\r\n  }\r\n  }\r\n  \r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app-container\">\r\n        <div style={this.state.brd} className=\"board\" onKeyUp = {this.handleKeyPress} tabIndex=\"0\">\r\n        \r\n          {this.state.board.map((cell, index) => {\r\n            if(cell==='.'){\r\n              return <div style={this.state.sqr} className=\"square sprite\">{cell}</div>;\r\n            }else if(cell===','){\r\n              return <div style={this.state.sqr} className=\"square player\">{cell}</div>;\r\n            }else{\r\n          return <div style={this.state.sqr} className=\"square\">{cell}</div>;\r\n            }\r\n        })}\r\n\r\n        </div>\r\n        <br/><button onClick={() => this.handleClick()}>{this.state.message}</button><br/><br/>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}